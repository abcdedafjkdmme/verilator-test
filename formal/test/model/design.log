
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.40+25 (git sha1 171577f90, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: uart_tx.v
Parsing formal SystemVerilog input from `uart_tx.v' to AST representation.
Storing AST representation for module `$abstract\uart_tx_comb'.
Storing AST representation for module `$abstract\uart_tx'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_tx'.
Generating RTLIL representation for module `\uart_tx'.

2.2.1. Analyzing design hierarchy..
Top module:  \uart_tx

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_tx_comb'.
Generating RTLIL representation for module `\uart_tx_comb'.

2.2.3. Analyzing design hierarchy..
Top module:  \uart_tx
Used module:     \uart_tx_comb

2.2.4. Analyzing design hierarchy..
Top module:  \uart_tx
Used module:     \uart_tx_comb
Removing unused module `$abstract\uart_tx'.
Removing unused module `$abstract\uart_tx_comb'.
Removed 2 unused modules.
Module uart_tx_comb directly or indirectly contains formal properties -> setting "keep" attribute.
Module uart_tx directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$uart_tx_comb.v:15$59 in module uart_tx_comb.
Marked 2 switch rules as full_case in process $proc$uart_tx.v:25$7 in module uart_tx.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 7 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\uart_tx.$proc$uart_tx.v:42$58'.
  Set init value: \is_past_valid = 1'0
Found init rule in `\uart_tx.$proc$uart_tx.v:23$57'.
  Set init value: \r_state = 0
Found init rule in `\uart_tx.$proc$uart_tx.v:15$56'.
  Set init value: \r_data = 8'00000000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~15 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_tx_comb.$proc$uart_tx_comb.v:15$59'.
     1/5: $4\o_uart_tx[0:0]
     2/5: $3\o_uart_tx[0:0]
     3/5: $2\o_uart_tx[0:0]
     4/5: $1\o_uart_tx[0:0]
     5/5: $assert$uart_tx_comb.v:23$68_EN
Creating decoders for process `\uart_tx.$proc$uart_tx.v:42$58'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:23$57'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:15$56'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:58$31'.
     1/6: $assert$uart_tx.v:66$50_EN
     2/6: $assert$uart_tx.v:64$45_EN
     3/6: $assert$uart_tx.v:63$42_EN
     4/6: $assert$uart_tx.v:61$39_EN
     5/6: $assert$uart_tx.v:60$36_EN
     6/6: $assert$uart_tx.v:59$33_EN
Creating decoders for process `\uart_tx.$proc$uart_tx.v:52$17'.
     1/2: $assert$uart_tx.v:55$29_EN
     2/2: $assert$uart_tx.v:54$24_EN
Creating decoders for process `\uart_tx.$proc$uart_tx.v:43$16'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:25$7'.
     1/1: $0\r_state[31:0]
Creating decoders for process `\uart_tx.$proc$uart_tx.v:16$3'.
     1/1: $0\r_data[7:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_tx_comb.\o_uart_tx' from process `\uart_tx_comb.$proc$uart_tx_comb.v:15$59'.

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_tx.$past$uart_tx.v:54$1$0' using process `\uart_tx.$proc$uart_tx.v:52$17'.
  created $dff cell `$procdff$137' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:55$2$0' using process `\uart_tx.$proc$uart_tx.v:52$17'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\uart_tx.\is_past_valid' using process `\uart_tx.$proc$uart_tx.v:43$16'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\uart_tx.\r_state' using process `\uart_tx.$proc$uart_tx.v:25$7'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\uart_tx.\r_data' using process `\uart_tx.$proc$uart_tx.v:16$3'.
  created $dff cell `$procdff$141' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\uart_tx_comb.$proc$uart_tx_comb.v:15$59'.
Removing empty process `uart_tx_comb.$proc$uart_tx_comb.v:15$59'.
Removing empty process `uart_tx.$proc$uart_tx.v:42$58'.
Removing empty process `uart_tx.$proc$uart_tx.v:23$57'.
Removing empty process `uart_tx.$proc$uart_tx.v:15$56'.
Found and cleaned up 6 empty switches in `\uart_tx.$proc$uart_tx.v:58$31'.
Removing empty process `uart_tx.$proc$uart_tx.v:58$31'.
Found and cleaned up 2 empty switches in `\uart_tx.$proc$uart_tx.v:52$17'.
Removing empty process `uart_tx.$proc$uart_tx.v:52$17'.
Removing empty process `uart_tx.$proc$uart_tx.v:43$16'.
Found and cleaned up 2 empty switches in `\uart_tx.$proc$uart_tx.v:25$7'.
Removing empty process `uart_tx.$proc$uart_tx.v:25$7'.
Found and cleaned up 1 empty switch in `\uart_tx.$proc$uart_tx.v:16$3'.
Removing empty process `uart_tx.$proc$uart_tx.v:16$3'.
Cleaned up 15 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx_comb.
<suppressed ~2 debug messages>
Optimizing module uart_tx.
<suppressed ~14 debug messages>

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx_comb.
Optimizing module uart_tx.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx_comb..
Finding unused cells or wires in module \uart_tx..
Removed 0 unused cells and 57 unused wires.
<suppressed ~2 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module uart_tx...
Checking module uart_tx_comb...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.
Optimizing module uart_tx_comb.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
<suppressed ~15 debug messages>
Finding identical cells in module `\uart_tx_comb'.
Removed a total of 5 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_tx_comb..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$75.
    dead port 1/2 on $mux $procmux$78.
    dead port 1/2 on $mux $procmux$81.
    dead port 1/2 on $mux $procmux$87.
    dead port 1/2 on $mux $procmux$90.
    dead port 1/2 on $mux $procmux$96.
Removed 6 multiplexer ports.
<suppressed ~12 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_comb.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
<suppressed ~6 debug messages>
Finding identical cells in module `\uart_tx_comb'.
Removed a total of 2 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_comb..
Removed 0 unused cells and 13 unused wires.
<suppressed ~2 debug messages>

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.
Optimizing module uart_tx_comb.

2.8.8. Rerunning OPT passes. (Maybe there is more to do..)

2.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \uart_tx_comb..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_tx.
  Optimizing cells in module \uart_tx_comb.
Performed a total of 0 changes.

2.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_comb'.
Removed a total of 0 cells.

2.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_comb..

2.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.
Optimizing module uart_tx_comb.

2.8.14. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 bits (of 32) from port B of cell uart_tx.$lt$uart_tx.v:27$11 ($lt).
Removed top 30 bits (of 32) from port B of cell uart_tx.$add$uart_tx.v:27$13 ($add).
Removed top 27 bits (of 32) from port B of cell uart_tx.$ne$uart_tx.v:53$22 ($ne).
Removed top 30 bits (of 32) from port B of cell uart_tx.$add$uart_tx.v:54$25 ($add).
Removed top 27 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:55$27 ($eq).
Removed top 30 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:59$32 ($eq).
Removed top 27 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:64$44 ($eq).
Removed top 30 bits (of 32) from port B of cell uart_tx.$gt$uart_tx.v:65$47 ($gt).
Removed top 29 bits (of 32) from port B of cell uart_tx.$sub$uart_tx.v:66$51 ($sub).
Removed top 31 bits (of 32) from port B of cell uart_tx_comb.$eq$uart_tx_comb.v:18$61 ($eq).
Removed top 31 bits (of 32) from port B of cell uart_tx_comb.$gt$uart_tx_comb.v:19$62 ($gt).
Removed top 28 bits (of 32) from port B of cell uart_tx_comb.$lt$uart_tx_comb.v:19$63 ($lt).
Removed top 30 bits (of 32) from port B of cell uart_tx_comb.$sub$uart_tx_comb.v:19$65 ($sub).
Removed top 28 bits (of 32) from port B of cell uart_tx_comb.$eq$uart_tx_comb.v:20$67 ($eq).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_comb..

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.
Optimizing module uart_tx_comb.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
Finding identical cells in module `\uart_tx_comb'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..
Finding unused cells or wires in module \uart_tx_comb..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== uart_tx ===

   Number of wires:                 44
   Number of wire bits:            313
   Number of public wires:           9
   Number of public wire bits:      54
   Number of ports:                  6
   Number of port bits:             13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 49
     $add                            2
     $check                          9
     $dff                            5
     $eq                             5
     $gt                             1
     $logic_and                      8
     $logic_not                      3
     $lt                             1
     $mux                            9
     $ne                             1
     $not                            1
     $reduce_bool                    1
     $shiftx                         1
     $sub                            1
     uart_tx_comb                    1

=== uart_tx_comb ===

   Number of wires:                 18
   Number of wire bits:             87
   Number of public wires:           3
   Number of public wire bits:      41
   Number of ports:                  3
   Number of port bits:             41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $check                          1
     $eq                             2
     $gt                             1
     $logic_and                      1
     $logic_not                      1
     $lt                             1
     $mux                            8
     $shiftx                         1
     $sub                            1

=== design hierarchy ===

   uart_tx                           1
     uart_tx_comb                    1

   Number of wires:                 62
   Number of wire bits:            400
   Number of public wires:          12
   Number of public wire bits:      95
   Number of ports:                  9
   Number of port bits:             54
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 65
     $add                            2
     $check                         10
     $dff                            5
     $eq                             7
     $gt                             2
     $logic_and                      9
     $logic_not                      4
     $lt                             2
     $mux                           17
     $ne                             1
     $not                            1
     $reduce_bool                    1
     $shiftx                         2
     $sub                            2

2.14. Executing CHECK pass (checking for obvious problems).
Checking module uart_tx...
Checking module uart_tx_comb...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \uart_tx
Used module:     \uart_tx_comb

3.2. Analyzing design hierarchy..
Top module:  \uart_tx
Used module:     \uart_tx_comb
Removed 0 unused modules.
Module uart_tx directly or indirectly contains formal properties -> setting "keep" attribute.
Module uart_tx_comb directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 1d441ff9e4, CPU: user 0.03s system 0.00s, MEM: 14.43 MB peak
Yosys 0.40+25 (git sha1 171577f90, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 22% 6x opt_expr (0 sec), 19% 5x opt_clean (0 sec), ...
