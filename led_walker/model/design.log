
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.40+25 (git sha1 171577f90, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: led_walker.v
Parsing formal SystemVerilog input from `led_walker.v' to AST representation.
Storing AST representation for module `$abstract\led_walker'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\led_walker'.
Generating RTLIL representation for module `\led_walker'.

2.2.1. Analyzing design hierarchy..
Top module:  \led_walker

2.2.2. Analyzing design hierarchy..
Top module:  \led_walker
Removing unused module `$abstract\led_walker'.
Removed 1 unused modules.
Module led_walker directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$led_walker.v:106$34 in module led_walker.
Marked 3 switch rules as full_case in process $proc$led_walker.v:71$22 in module led_walker.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 27 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\led_walker.$proc$led_walker.v:141$118'.
  Set init value: \is_past_valid = 1'0
Found init rule in `\led_walker.$proc$led_walker.v:65$117'.
  Set init value: \r_state = 0
Found init rule in `\led_walker.$proc$led_walker.v:53$116'.
  Set init value: \r_counter = 3'000
Found init rule in `\led_walker.$proc$led_walker.v:51$115'.
  Set init value: \r_leds = 8'00000000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~13 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\led_walker.$proc$led_walker.v:141$118'.
Creating decoders for process `\led_walker.$proc$led_walker.v:65$117'.
Creating decoders for process `\led_walker.$proc$led_walker.v:53$116'.
Creating decoders for process `\led_walker.$proc$led_walker.v:51$115'.
Creating decoders for process `\led_walker.$proc$led_walker.v:146$57'.
     1/5: $assert$led_walker.v:151$112_EN
     2/5: $assert$led_walker.v:150$105_EN
     3/5: $assert$led_walker.v:149$97_EN
     4/5: $assert$led_walker.v:148$90_EN
     5/5: $assert$led_walker.v:147$83_EN
Creating decoders for process `\led_walker.$proc$led_walker.v:142$56'.
Creating decoders for process `\led_walker.$proc$led_walker.v:136$50'.
     1/1: $assert$led_walker.v:138$53_EN
Creating decoders for process `\led_walker.$proc$led_walker.v:106$34'.
     1/5: $1$bitselwrite$pos$led_walker.v:119$1[2:0]$36
     2/5: $1\r_leds[7:0]
     3/5: $assert$led_walker.v:129$47_EN
     4/5: $0\r_counter[2:0]
     5/5: $0\o_ack[0:0]
Creating decoders for process `\led_walker.$proc$led_walker.v:71$22'.
     1/2: $assert$led_walker.v:100$31_EN
     2/2: $0\r_state[31:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\led_walker.$past$led_walker.v:147$2$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$183' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:147$3$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$184' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:147$4$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$185' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:147$5$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$186' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:148$6$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$187' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:148$7$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$188' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:148$8$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$189' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:149$9$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$190' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:149$10$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:149$11$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:150$12$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:150$13$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:150$14$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:150$15$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$196' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:150$16$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$197' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:151$17$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$198' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:151$18$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$199' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:151$19$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$200' with positive edge clock.
Creating register for signal `\led_walker.$past$led_walker.v:151$20$0' using process `\led_walker.$proc$led_walker.v:146$57'.
  created $dff cell `$procdff$201' with positive edge clock.
Creating register for signal `\led_walker.\is_past_valid' using process `\led_walker.$proc$led_walker.v:142$56'.
  created $dff cell `$procdff$202' with positive edge clock.
Creating register for signal `\led_walker.\o_ack' using process `\led_walker.$proc$led_walker.v:106$34'.
  created $dff cell `$procdff$203' with positive edge clock.
Creating register for signal `\led_walker.\r_leds' using process `\led_walker.$proc$led_walker.v:106$34'.
  created $dff cell `$procdff$204' with positive edge clock.
Creating register for signal `\led_walker.\r_counter' using process `\led_walker.$proc$led_walker.v:106$34'.
  created $dff cell `$procdff$205' with positive edge clock.
Creating register for signal `\led_walker.$bitselwrite$pos$led_walker.v:119$1' using process `\led_walker.$proc$led_walker.v:106$34'.
  created $dff cell `$procdff$206' with positive edge clock.
Creating register for signal `\led_walker.\r_state' using process `\led_walker.$proc$led_walker.v:71$22'.
  created $dff cell `$procdff$207' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `led_walker.$proc$led_walker.v:141$118'.
Removing empty process `led_walker.$proc$led_walker.v:65$117'.
Removing empty process `led_walker.$proc$led_walker.v:53$116'.
Removing empty process `led_walker.$proc$led_walker.v:51$115'.
Found and cleaned up 5 empty switches in `\led_walker.$proc$led_walker.v:146$57'.
Removing empty process `led_walker.$proc$led_walker.v:146$57'.
Removing empty process `led_walker.$proc$led_walker.v:142$56'.
Found and cleaned up 1 empty switch in `\led_walker.$proc$led_walker.v:136$50'.
Removing empty process `led_walker.$proc$led_walker.v:136$50'.
Found and cleaned up 3 empty switches in `\led_walker.$proc$led_walker.v:106$34'.
Removing empty process `led_walker.$proc$led_walker.v:106$34'.
Found and cleaned up 4 empty switches in `\led_walker.$proc$led_walker.v:71$22'.
Removing empty process `led_walker.$proc$led_walker.v:71$22'.
Cleaned up 13 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.
<suppressed ~15 debug messages>

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \led_walker..
Removed 6 unused cells and 62 unused wires.
<suppressed ~7 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module led_walker...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\led_walker'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \led_walker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \led_walker.
    New ctrl vector for $pmux cell $procmux$142: $auto$opt_reduce.cc:134:opt_pmux$209
    New ctrl vector for $pmux cell $procmux$158: { $auto$opt_reduce.cc:134:opt_pmux$211 $procmux$143_CMP }
    New ctrl vector for $pmux cell $procmux$164: $auto$opt_reduce.cc:134:opt_pmux$213
  Optimizing cells in module \led_walker.
Performed a total of 3 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\led_walker'.
<suppressed ~8 debug messages>
Removed a total of 3 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \led_walker..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.
<suppressed ~1 debug messages>

2.8.8. Rerunning OPT passes. (Maybe there is more to do..)

2.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \led_walker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \led_walker.
Performed a total of 0 changes.

2.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\led_walker'.
Removed a total of 0 cells.

2.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \led_walker..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.

2.8.14. Rerunning OPT passes. (Maybe there is more to do..)

2.8.15. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \led_walker..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

2.8.16. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \led_walker.
Performed a total of 0 changes.

2.8.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\led_walker'.
Removed a total of 0 cells.

2.8.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \led_walker..

2.8.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.

2.8.20. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell led_walker.$add$led_walker.v:116$39 ($add).
Removed top 29 bits (of 32) from port Y of cell led_walker.$add$led_walker.v:116$39 ($add).
Converting cell led_walker.$neg$led_walker.v:0$44 ($neg) from signed to unsigned.
Removed top 1 bits (of 4) from port A of cell led_walker.$neg$led_walker.v:0$44 ($neg).
Removed top 24 bits (of 32) from port Y of cell led_walker.$shift$led_walker.v:0$45 ($shift).
Removed top 27 bits (of 32) from port B of cell led_walker.$lt$led_walker.v:137$52 ($lt).
Removed top 30 bits (of 32) from port B of cell led_walker.$eq$led_walker.v:147$84 ($eq).
Removed top 30 bits (of 32) from port B of cell led_walker.$eq$led_walker.v:148$85 ($eq).
Removed top 29 bits (of 32) from port B of cell led_walker.$eq$led_walker.v:148$91 ($eq).
Removed top 29 bits (of 32) from port B of cell led_walker.$eq$led_walker.v:149$95 ($eq).
Removed top 30 bits (of 32) from port B of cell led_walker.$eq$led_walker.v:151$107 ($eq).
Removed top 31 bits (of 32) from port A of cell led_walker.$shl$led_walker.v:151$113 ($shl).
Removed top 31 bits (of 32) from port B of cell led_walker.$procmux$140_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell led_walker.$procmux$143_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell led_walker.$procmux$144_CMP0 ($eq).
Removed top 30 bits (of 32) from mux cell led_walker.$procmux$174 ($mux).
Removed top 29 bits (of 32) from wire led_walker.$add$led_walker.v:116$39_Y.
Removed top 30 bits (of 32) from wire led_walker.$procmux$174_Y.

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \led_walker..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module led_walker.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\led_walker'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \led_walker..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== led_walker ===

   Number of wires:                101
   Number of wire bits:            488
   Number of public wires:          15
   Number of public wire bits:      64
   Number of ports:                 10
   Number of port bits:             19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     $add                            1
     $check                          8
     $dff                           24
     $eq                            12
     $logic_and                     22
     $logic_not                      9
     $lt                             1
     $mux                           13
     $neg                            1
     $pmux                           3
     $reduce_bool                    2
     $reduce_or                      2
     $shift                          1
     $shl                            1

2.14. Executing CHECK pass (checking for obvious problems).
Checking module led_walker...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \led_walker

3.2. Analyzing design hierarchy..
Top module:  \led_walker
Removed 0 unused modules.
Module led_walker directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: ff3743727f, CPU: user 0.03s system 0.00s, MEM: 14.57 MB peak
Yosys 0.40+25 (git sha1 171577f90, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 24% 6x opt_clean (0 sec), 23% 7x opt_expr (0 sec), ...
