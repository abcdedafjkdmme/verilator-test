$version Generated by VerilatedVcd $end
$date Thu May  2 07:29:12 2024
 $end
$timescale  10s $end

 $scope module TOP $end
  $var wire 16 ) i_a_reg_data [15:0] $end
  $var wire  1 # i_clk $end
  $var wire 16 , i_d_reg_data [15:0] $end
  $var wire 16 $ i_instr [15:0] $end
  $var wire 16 % i_m [15:0] $end
  $var wire 16 / i_pc [15:0] $end
  $var wire 16 * o_a_reg_data [15:0] $end
  $var wire  1 + o_a_we $end
  $var wire 16 - o_d_reg_data [15:0] $end
  $var wire  1 . o_d_we $end
  $var wire 16 & o_m [15:0] $end
  $var wire 16 ' o_m_addr [15:0] $end
  $var wire  1 ( o_m_we $end
  $var wire 16 0 o_pc [15:0] $end
  $scope module cpu_datapath $end
   $var wire  1 6 alu_jmp $end
   $var wire 16 5 alu_o [15:0] $end
   $var wire 16 ) control_unit_o_pc [15:0] $end
   $var wire 16 ) i_a_reg_data [15:0] $end
   $var wire  1 # i_clk $end
   $var wire 16 , i_d_reg_data [15:0] $end
   $var wire 16 $ i_instr [15:0] $end
   $var wire 16 % i_m [15:0] $end
   $var wire 16 / i_pc [15:0] $end
   $var wire 16 * o_a_reg_data [15:0] $end
   $var wire  1 + o_a_we $end
   $var wire  6 3 o_alu_comp [5:0] $end
   $var wire  3 4 o_alu_comp_jmp [2:0] $end
   $var wire 16 2 o_alu_i_a_or_m [15:0] $end
   $var wire 16 , o_alu_i_d [15:0] $end
   $var wire 16 - o_d_reg_data [15:0] $end
   $var wire  1 . o_d_we $end
   $var wire 16 & o_m [15:0] $end
   $var wire 16 ' o_m_addr [15:0] $end
   $var wire  1 ( o_m_we $end
   $var wire 16 0 o_pc [15:0] $end
   $var wire  1 1 o_pc_we $end
   $scope module alu_i $end
    $var wire 32 7 WIDTH [31:0] $end
    $var wire 16 2 i_a_or_m [15:0] $end
    $var wire  6 3 i_comp [5:0] $end
    $var wire  3 4 i_comp_jmp [2:0] $end
    $var wire 16 , i_d [15:0] $end
    $var wire  1 6 o_jmp $end
    $var wire 16 5 o_q [15:0] $end
   $upscope $end
   $scope module cpu_control_unit_i $end
    $var wire 16 ) i_a_reg_data [15:0] $end
    $var wire  1 6 i_alu_jmp $end
    $var wire 16 5 i_alu_o [15:0] $end
    $var wire 16 , i_d_reg_data [15:0] $end
    $var wire 16 $ i_instr [15:0] $end
    $var wire 16 % i_m [15:0] $end
    $var wire 16 * o_a_reg_data [15:0] $end
    $var wire  1 + o_a_we $end
    $var wire  6 3 o_alu_comp [5:0] $end
    $var wire  3 4 o_alu_comp_jmp [2:0] $end
    $var wire 16 2 o_alu_i_a_or_m [15:0] $end
    $var wire 16 , o_alu_i_d [15:0] $end
    $var wire 16 - o_d_reg_data [15:0] $end
    $var wire  1 . o_d_we $end
    $var wire 16 & o_m [15:0] $end
    $var wire 16 ' o_m_addr [15:0] $end
    $var wire  1 ( o_m_we $end
    $var wire 16 ) o_pc [15:0] $end
    $var wire  1 1 o_pc_we $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#6
0#
b0000000000000010 $
b0000000000000000 %
b0000000000000000 &
b0000000000000000 '
0(
b0000000000000000 )
b0000000000000010 *
1+
b0000000000000000 ,
b0000000000000000 -
0.
b0000000000000000 /
b0000000000000000 0
01
b0000000000000000 2
b000000 3
b010 4
b0000000000000000 5
16
b00000000000000000000000000010000 7
#10
1#
b0000000000000001 0
#15
0#
