
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.40+25 (git sha1 171577f90, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: uart_tx.v
Parsing formal SystemVerilog input from `uart_tx.v' to AST representation.
Storing AST representation for module `$abstract\uart_tx'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_tx'.
Generating RTLIL representation for module `\uart_tx'.

2.2.1. Analyzing design hierarchy..
Top module:  \uart_tx

2.2.2. Analyzing design hierarchy..
Top module:  \uart_tx
Removing unused module `$abstract\uart_tx'.
Removed 1 unused modules.
Module uart_tx directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$uart_tx.v:26$15 in module uart_tx.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 15 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\uart_tx.$proc$uart_tx.v:50$82'.
  Set init value: \is_past_valid = 1'0
Found init rule in `\uart_tx.$proc$uart_tx.v:19$81'.
  Set init value: \r_state = 0
Found init rule in `\uart_tx.$proc$uart_tx.v:12$80'.
  Set init value: \r_data = 8'00000000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~14 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_tx.$proc$uart_tx.v:50$82'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:19$81'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:12$80'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:55$33'.
     1/7: $assert$uart_tx.v:62$76_EN
     2/7: $assert$uart_tx.v:61$70_EN
     3/7: $assert$uart_tx.v:60$66_EN
     4/7: $assert$uart_tx.v:59$62_EN
     5/7: $assert$uart_tx.v:58$59_EN
     6/7: $assert$uart_tx.v:57$54_EN
     7/7: $assert$uart_tx.v:56$47_EN
Creating decoders for process `\uart_tx.$proc$uart_tx.v:51$32'.
Creating decoders for process `\uart_tx.$proc$uart_tx.v:26$15'.
     1/3: $0\r_state[31:0]
     2/3: $assert$uart_tx.v:38$27_EN
     3/3: $0\o_uart_tx[0:0]
Creating decoders for process `\uart_tx.$proc$uart_tx.v:13$12'.
     1/1: $0\r_data[7:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_tx.$past$uart_tx.v:56$1$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$129' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:57$2$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$130' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:57$3$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$131' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:57$4$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$132' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:57$5$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$133' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:58$6$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$134' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:60$7$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$135' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:61$8$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$136' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:62$9$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$137' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:62$10$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\uart_tx.$past$uart_tx.v:62$11$0' using process `\uart_tx.$proc$uart_tx.v:55$33'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\uart_tx.\is_past_valid' using process `\uart_tx.$proc$uart_tx.v:51$32'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\uart_tx.\o_uart_tx' using process `\uart_tx.$proc$uart_tx.v:26$15'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\uart_tx.\r_state' using process `\uart_tx.$proc$uart_tx.v:26$15'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\uart_tx.\r_data' using process `\uart_tx.$proc$uart_tx.v:13$12'.
  created $dff cell `$procdff$143' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `uart_tx.$proc$uart_tx.v:50$82'.
Removing empty process `uart_tx.$proc$uart_tx.v:19$81'.
Removing empty process `uart_tx.$proc$uart_tx.v:12$80'.
Found and cleaned up 7 empty switches in `\uart_tx.$proc$uart_tx.v:55$33'.
Removing empty process `uart_tx.$proc$uart_tx.v:55$33'.
Removing empty process `uart_tx.$proc$uart_tx.v:51$32'.
Found and cleaned up 6 empty switches in `\uart_tx.$proc$uart_tx.v:26$15'.
Removing empty process `uart_tx.$proc$uart_tx.v:26$15'.
Found and cleaned up 1 empty switch in `\uart_tx.$proc$uart_tx.v:13$12'.
Removing empty process `uart_tx.$proc$uart_tx.v:13$12'.
Cleaned up 14 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.
<suppressed ~13 debug messages>

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..
Removed 0 unused cells and 51 unused wires.
<suppressed ~1 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module uart_tx...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_tx.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
Removed a total of 0 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.

2.8.8. Rerunning OPT passes. (Maybe there is more to do..)

2.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_tx.
Performed a total of 0 changes.

2.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
Removed a total of 0 cells.

2.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..

2.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.

2.8.14. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 bits (of 32) from port B of cell uart_tx.$lt$uart_tx.v:28$19 ($lt).
Removed top 30 bits (of 32) from port B of cell uart_tx.$add$uart_tx.v:28$20 ($add).
Removed top 30 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:33$22 ($eq).
Removed top 29 bits (of 32) from port B of cell uart_tx.$sub$uart_tx.v:34$24 ($sub).
Removed top 27 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:35$26 ($eq).
Removed top 30 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:56$45 ($eq).
Removed top 27 bits (of 32) from port B of cell uart_tx.$ne$uart_tx.v:57$51 ($ne).
Removed top 30 bits (of 32) from port B of cell uart_tx.$add$uart_tx.v:57$55 ($add).
Removed top 27 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:58$57 ($eq).
Removed top 27 bits (of 32) from port B of cell uart_tx.$eq$uart_tx.v:61$68 ($eq).
Removed top 30 bits (of 32) from port B of cell uart_tx.$gt$uart_tx.v:62$72 ($gt).
Removed top 27 bits (of 32) from port B of cell uart_tx.$lt$uart_tx.v:62$73 ($lt).
Removed top 29 bits (of 32) from port B of cell uart_tx.$sub$uart_tx.v:62$77 ($sub).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_tx.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_tx'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_tx..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== uart_tx ===

   Number of wires:                 70
   Number of wire bits:            618
   Number of public wires:           8
   Number of public wire bits:      53
   Number of ports:                  5
   Number of port bits:             12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $add                            2
     $check                          8
     $dff                           15
     $eq                             7
     $gt                             1
     $logic_and                     11
     $logic_not                      4
     $lt                             2
     $mux                           18
     $ne                             1
     $not                            1
     $reduce_bool                    1
     $shiftx                         2
     $sub                            2

2.14. Executing CHECK pass (checking for obvious problems).
Checking module uart_tx...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \uart_tx

3.2. Analyzing design hierarchy..
Top module:  \uart_tx
Removed 0 unused modules.
Module uart_tx directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 4af8f7f7fd, CPU: user 0.03s system 0.00s, MEM: 14.57 MB peak
Yosys 0.40+25 (git sha1 171577f90, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os)
Time spent: 23% 5x opt_clean (0 sec), 21% 6x opt_expr (0 sec), ...
